import nu.studer.gradle.jooq.JooqEdition
import org.jooq.meta.jaxb.Logging

plugins {
    id 'java'
    id 'com.adarshr.test-logger' version '3.2.0'
    id "io.qameta.allure" version "2.12.0"
    id 'nu.studer.jooq' version '9.0'
}
group 'test.framework'
version '1.0'

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

def props = new Properties()
file("src/test/resources/test.properties").withInputStream { stream ->
    props.load(stream)
}

def dbUrl = System.getProperty("db.url", props.getProperty("db.url"))
def dbUser = System.getProperty("db.user", props.getProperty("db.user"))
def dbPassword = System.getProperty('db.password', props.getProperty('db.password'))
def apiUrl = System.getProperty('api.url', props.getProperty('api.url'))

dependencies {
    implementation 'org.json:json:20240303'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    implementation 'com.codeborne:selenide-testng:7.3.2'
    implementation 'io.rest-assured:rest-assured:5.4.0'
    implementation 'org.testng:testng:7.10.2'
    implementation 'org.jooq:jooq:3.19.11'
    jooqGenerator 'org.postgresql:postgresql:42.7.3'
    jooqGenerator 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
    jooqGenerator 'org.glassfish.jaxb:jaxb-runtime:3.0.1'
    testImplementation 'org.postgresql:postgresql:42.7.3'
    implementation 'io.qameta.allure:allure-testng:2.22.0'
    implementation 'io.qameta.allure:allure-java-commons:2.22.0'
    implementation 'io.qameta.allure:allure-rest-assured:2.22.0'
    implementation 'net.datafaker:datafaker:2.3.1'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
    implementation 'org.projectlombok:lombok:1.18.34'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.14.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0'
    implementation 'org.slf4j:slf4j-api:2.0.16'
    implementation 'ch.qos.logback:logback-classic:1.5.7'
    implementation 'com.sun.mail:javax.mail:1.6.2'
    runtimeOnly 'org.aspectj:aspectjweaver:1.9.22.1'
    implementation 'com.talanlabs:avatar-generator-cat:1.1.0'
    implementation 'com.github.automatedowl:allure-environment-writer:1.0.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.aeonbits.owner:owner:1.0.12'
}

jooq {
    version = '3.19.11'
    edition = JooqEdition.OSS



    configurations {
        main {
            generateSchemaSourceOnCompilation = false

            generationTool {
                logging = Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = dbUrl
                    user = dbUser
                    password = dbPassword
                    properties {
                        property {
                            key = 'ssl'
                            value = false
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'jooq'
                        directory = 'src/main/generated'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}


sourceSets {
    main {
        java {
            srcDirs 'src/main/generated'
        }
    }
}

test {
    testlogger {
        theme 'mocha'
        showStandardStreams false
        showPassedStandardStreams false
        showSkippedStandardStreams false
        showFailedStandardStreams false
        showExceptions false
    }
    useTestNG()

    systemProperties = [
            'db.url': dbUrl,
            'db.user': dbUser,
            'db.password': dbPassword,
            'api.url': apiUrl
    ]
}


allure {
    version = '2.30.0'
}
