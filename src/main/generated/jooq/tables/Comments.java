/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import jooq.Keys;
import jooq.Public;
import jooq.tables.Posts.PostsPath;
import jooq.tables.records.CommentsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Comments extends TableImpl<CommentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.comments</code>
     */
    public static final Comments COMMENTS = new Comments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommentsRecord> getRecordType() {
        return CommentsRecord.class;
    }

    /**
     * The column <code>public.comments.id</code>.
     */
    public final TableField<CommentsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.comments.created_at</code>.
     */
    public final TableField<CommentsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.comments.created_by</code>.
     */
    public final TableField<CommentsRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.comments.message</code>.
     */
    public final TableField<CommentsRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.comments.modified_by</code>.
     */
    public final TableField<CommentsRecord, Long> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.comments.updated_at</code>.
     */
    public final TableField<CommentsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.comments.post_id</code>.
     */
    public final TableField<CommentsRecord, Long> POST_ID = createField(DSL.name("post_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Comments(Name alias, Table<CommentsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Comments(Name alias, Table<CommentsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.comments</code> table reference
     */
    public Comments(String alias) {
        this(DSL.name(alias), COMMENTS);
    }

    /**
     * Create an aliased <code>public.comments</code> table reference
     */
    public Comments(Name alias) {
        this(alias, COMMENTS);
    }

    /**
     * Create a <code>public.comments</code> table reference
     */
    public Comments() {
        this(DSL.name("comments"), null);
    }

    public <O extends Record> Comments(Table<O> path, ForeignKey<O, CommentsRecord> childPath, InverseForeignKey<O, CommentsRecord> parentPath) {
        super(path, childPath, parentPath, COMMENTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CommentsPath extends Comments implements Path<CommentsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CommentsPath(Table<O> path, ForeignKey<O, CommentsRecord> childPath, InverseForeignKey<O, CommentsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CommentsPath(Name alias, Table<CommentsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CommentsPath as(String alias) {
            return new CommentsPath(DSL.name(alias), this);
        }

        @Override
        public CommentsPath as(Name alias) {
            return new CommentsPath(alias, this);
        }

        @Override
        public CommentsPath as(Table<?> alias) {
            return new CommentsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CommentsRecord, Long> getIdentity() {
        return (Identity<CommentsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CommentsRecord> getPrimaryKey() {
        return Keys.COMMENTS_PKEY;
    }

    @Override
    public List<ForeignKey<CommentsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COMMENTS__FKH4C7LVSC298WHOYD4W9TA25CR);
    }

    private transient PostsPath _posts;

    /**
     * Get the implicit join path to the <code>public.posts</code> table.
     */
    public PostsPath posts() {
        if (_posts == null)
            _posts = new PostsPath(this, Keys.COMMENTS__FKH4C7LVSC298WHOYD4W9TA25CR, null);

        return _posts;
    }

    @Override
    public Comments as(String alias) {
        return new Comments(DSL.name(alias), this);
    }

    @Override
    public Comments as(Name alias) {
        return new Comments(alias, this);
    }

    @Override
    public Comments as(Table<?> alias) {
        return new Comments(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Comments rename(String name) {
        return new Comments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comments rename(Name name) {
        return new Comments(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comments rename(Table<?> name) {
        return new Comments(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comments where(Condition condition) {
        return new Comments(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comments where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comments where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comments where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Comments where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Comments where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Comments where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Comments where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comments whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Comments whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
